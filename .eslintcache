[{"C:\\Daten\\git\\annotator\\src\\index.js":"1","C:\\Daten\\git\\annotator\\src\\reportWebVitals.js":"2","C:\\Daten\\git\\annotator\\src\\components\\App.js":"3","C:\\Daten\\git\\annotator\\src\\components\\errorSnackbar.js":"4","C:\\Daten\\git\\annotator\\src\\components\\appHeader.js":"5","C:\\Daten\\git\\annotator\\src\\components\\loadingBar.js":"6","C:\\Daten\\git\\annotator\\src\\pages\\documentsManager.js":"7","C:\\Daten\\git\\annotator\\src\\pages\\documentEditor.js":"8","C:\\Daten\\git\\annotator\\src\\pages\\fileUpload.js":"9","C:\\Daten\\git\\annotator\\src\\components\\infoSnackbar.js":"10","C:\\Daten\\git\\annotator\\src\\pages\\documentAnnotator.js":"11","C:\\Daten\\git\\annotator\\src\\components\\help.js":"12"},{"size":573,"mtime":1610819097422,"results":"13","hashOfConfig":"14"},{"size":375,"mtime":1610819097427,"results":"15","hashOfConfig":"14"},{"size":1188,"mtime":1611089388891,"results":"16","hashOfConfig":"14"},{"size":1389,"mtime":1611089409869,"results":"17","hashOfConfig":"14"},{"size":2251,"mtime":1611068884017,"results":"18","hashOfConfig":"14"},{"size":643,"mtime":1611083357188,"results":"19","hashOfConfig":"14"},{"size":6967,"mtime":1611085545123,"results":"20","hashOfConfig":"14"},{"size":5290,"mtime":1611089835585,"results":"21","hashOfConfig":"14"},{"size":4999,"mtime":1611078961508,"results":"22","hashOfConfig":"14"},{"size":1389,"mtime":1610906402696,"results":"23","hashOfConfig":"14"},{"size":5583,"mtime":1611088784618,"results":"24","hashOfConfig":"14"},{"size":3658,"mtime":1611090667859,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"186z358",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Daten\\git\\annotator\\src\\index.js",[],["53","54"],"C:\\Daten\\git\\annotator\\src\\reportWebVitals.js",[],"C:\\Daten\\git\\annotator\\src\\components\\App.js",[],"C:\\Daten\\git\\annotator\\src\\components\\errorSnackbar.js",[],"C:\\Daten\\git\\annotator\\src\\components\\appHeader.js",[],"C:\\Daten\\git\\annotator\\src\\components\\loadingBar.js",[],"C:\\Daten\\git\\annotator\\src\\pages\\documentsManager.js",["55"],"import React, { Component, Fragment } from 'react';\r\nimport { withRouter, Link } from 'react-router-dom';\r\nimport {\r\n  withStyles,\r\n  Typography,\r\n  Paper,\r\n  TextField,\r\n  IconButton,\r\n  TableContainer, \r\n  Table, \r\n  TableHead, \r\n  TableBody, \r\n  TableCell,\r\n  TableRow\r\n} from '@material-ui/core';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport ShareIcon from '@material-ui/icons/Share';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport SaveAltIcon from '@material-ui/icons/SaveAlt';\r\nimport { orderBy, filter } from 'lodash';\r\nimport { compose } from 'recompose';\r\n\r\nimport LoadingBar from '../components/loadingBar';\r\nimport InfoSnackbar from '../components/infoSnackbar';\r\nimport ErrorSnackbar from '../components/errorSnackbar';\r\n\r\nconst MAX_LENGTH = 100\r\nconst styles = theme => ({\r\n  documentsView: {\r\n    whiteSpace: \"inherit\",\r\n  },\r\n  searchInput: {\r\n    width: \"100%\"\r\n  },\r\n  tableHeader: {\r\n    fontWeight: \"bold\"\r\n  },\r\n  tableRow: {\r\n    textDecoration: \"none\",\r\n    \"&:hover\": {\r\n      background: \"#efefef\"\r\n    },\r\n  }\r\n});\r\n\r\nclass DocumentsManager extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      loading: true,\r\n      query: \"\",\r\n      documents: \"\",\r\n\r\n      success: null,\r\n      error: null,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getDocuments();\r\n  }\r\n\r\n  async fetch(method, endpoint, body) {\r\n    try {\r\n      this.setState({\r\n        loading: true\r\n      })\r\n\r\n      let response = await fetch(`/api${ endpoint }`, {\r\n        method,\r\n        body: body,\r\n      });\r\n\r\n      this.setState({\r\n        loading: false\r\n      })\r\n\r\n      response = await response.json();\r\n      return response.documents\r\n    } catch (error) {\r\n      console.error(error);\r\n\r\n      this.setState({ error });\r\n    }\r\n  }\r\n\r\n  async getDocuments() {\r\n    let documents = await this.fetch('get', '/documents')\r\n\r\n    this.setState({ \r\n      loading: false, \r\n      documents: documents || [] \r\n    });\r\n  }\r\n\r\n  async deleteDocument(e, document) {\r\n    e.preventDefault()\r\n    if (window.confirm(`Are you sure you want to delete the document \"${ document.name }\"`)) {\r\n      await this.fetch('delete', `/documents/${ document._id }`);\r\n\r\n      if(!this.state.error) {\r\n        this.setState({\r\n          success: \"Document deleted successfully\"\r\n        })\r\n      }\r\n\r\n      this.getDocuments();\r\n    }\r\n  }\r\n\r\n  shareDocumentLink(e, document) {\r\n    e.preventDefault()\r\n    navigator.clipboard.writeText(window.location.origin + \"/documents/\" + document._id)\r\n\r\n    this.setState({\r\n      success: \"Copied link to document to clipboard\"\r\n    })\r\n  }\r\n\r\n  handleSearchChange = evt => {\r\n    this.setState({ \r\n      query: evt.target.value \r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n\r\n    let that = this\r\n    let documents = filter(this.state.documents, function(obj) {\r\n      return obj.name.toUpperCase().includes(that.state.query.toUpperCase());\r\n    })\r\n    \r\n    return (\r\n      <Fragment>\r\n        <TextField\r\n          type=\"text\"\r\n          key=\"inputQuery\"\r\n          placeholder=\"Search\"\r\n          label=\"Search\"\r\n          className={classes.searchInput}\r\n          value={this.state.query}\r\n          onChange={this.handleSearchChange}\r\n          variant=\"outlined\"\r\n          size=\"small\"\r\n          autoFocus \r\n        />\r\n\r\n        <Typography variant=\"h4\">Documents</Typography>\r\n        \r\n        {this.state.documents.length > 0 ? (\r\n          // documents available\r\n          <Paper elevation={1} className={ classes.documentsView }>\r\n            <TableContainer component={Paper}>\r\n              <Table className={classes.table} aria-label=\"data table\">\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell className={ classes.tableHeader }>Document name</TableCell>\r\n                    <TableCell className={ classes.tableHeader }>Content</TableCell>\r\n                    <TableCell className={ classes.tableHeader }>Updated At</TableCell>\r\n                    <TableCell className={ classes.tableHeader }>Edit</TableCell>\r\n                    <TableCell className={ classes.tableHeader }>Share</TableCell>\r\n                    <TableCell className={ classes.tableHeader }>Remove</TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {orderBy(documents, ['updatedAt', 'name'], ['desc', 'asc']).map(document => (\r\n                    <TableRow key={document._id} className={classes.tableRow} component={Link} to={`/documents/${document._id}/`}>\r\n                      <TableCell component=\"th\" scope=\"row\">{document.name}</TableCell>\r\n                      <TableCell>\r\n                        { document.content.length > MAX_LENGTH ? (\r\n                          <div>\r\n                              {`${ document.content.substring(0, MAX_LENGTH) }...` }\r\n                          </div>\r\n                          ) : (\r\n                          <div>\r\n                              { document.content }\r\n                          </div>\r\n                          ) \r\n                        }\r\n                      </TableCell>\r\n                      <TableCell>{document.updatedAt}</TableCell>\r\n                      <TableCell component={Link} to={`/documents/${document._id}/edit`} color=\"inherit\">\r\n                        <IconButton >\r\n                          <EditIcon/>\r\n                        </IconButton>\r\n                      </TableCell>\r\n                      <TableCell onClick={(e) => this.shareDocumentLink(e, document, navigator)} color=\"inherit\">\r\n                        <IconButton >\r\n                          <ShareIcon />\r\n                        </IconButton>\r\n                      </TableCell>\r\n                      <TableCell onClick={(e) => this.deleteDocument(document)} color=\"inherit\">\r\n                        <IconButton >\r\n                          <DeleteIcon />\r\n                        </IconButton>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n            </Paper>\r\n        ) : (\r\n          // no documents available\r\n          !this.state.loading && (\r\n            <Typography variant=\"subtitle1\">So far no documents have been created</Typography>\r\n          )\r\n        )}\r\n  \r\n        {this.state.error && (\r\n          <ErrorSnackbar\r\n            onClose={() => this.setState({ error: null })}\r\n            message={this.state.error.message}\r\n          />\r\n        )}\r\n\r\n        {this.state.loading && (\r\n          <LoadingBar/>\r\n        )}\r\n\r\n        {this.state.success && (\r\n          <InfoSnackbar\r\n            onClose={() => this.setState({ success: null })}\r\n            message={this.state.success}\r\n          />\r\n        )}\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default compose(\r\n  withRouter,\r\n  withStyles(styles),\r\n)(DocumentsManager);","C:\\Daten\\git\\annotator\\src\\pages\\documentEditor.js",[],"C:\\Daten\\git\\annotator\\src\\pages\\fileUpload.js",["56"],"import React, { Component, Fragment } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport {\r\n  withStyles,\r\n  Typography,\r\n  Button,\r\n  Select,\r\n  InputLabel,\r\n  MenuItem\r\n} from '@material-ui/core';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport { compose } from 'recompose';\r\n\r\nimport LoadingBar from '../components/loadingBar';\r\nimport ErrorSnackbar from '../components/errorSnackbar';\r\nimport InfoSnackbar from '../components/infoSnackbar'\r\n\r\nconst styles = theme => ({\r\n  useCase: {\r\n    marginTop: theme.spacing(2),\r\n    outline: 0,\r\n  },\r\n  fab: {\r\n    position: 'absolute',\r\n    bottom: theme.spacing(3),\r\n    right: theme.spacing(3),\r\n    [theme.breakpoints.down('xs')]: {\r\n      bottom: theme.spacing(2),\r\n      right: theme.spacing(2),\r\n    },\r\n  },\r\n});\r\nconst languages = [\"English\", \"Czech\"]\r\n\r\nclass FileUploadComponent extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {      \r\n        document: '',\r\n        language: \"English\",\r\n        inputFileKey: Date.now(),\r\n\r\n        loading: true,\r\n        success: null,\r\n        error: null,\r\n      };\r\n\r\n      this.onFileChange = this.onFileChange.bind(this);\r\n      this.handleLanguageChange = this.handleLanguageChange.bind(this)\r\n      this.onSubmit = this.onSubmit.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({\r\n      loading: false\r\n    })\r\n  }\r\n\r\n  async fetch(method, endpoint, body) {\r\n    try {\r\n      this.setState({\r\n        loading: true,\r\n      })\r\n\r\n      const response = await fetch(`/api${ endpoint }`, {\r\n        method,\r\n        headers: {\r\n          \"Accept\": \"application/json\",\r\n          \"type\": \"formData\"\r\n        },\r\n        body: body\r\n      });\r\n\r\n      this.setState({\r\n        loading: false\r\n      })\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error(error);\r\n      this.setState({ \r\n        error: error \r\n      });\r\n    }\r\n  }\r\n\r\n  onFileChange(evt) {\r\n      this.setState({ \r\n        document: evt.target.files[0] \r\n      })\r\n  }\r\n\r\n  handleLanguageChange(evt) {\r\n    this.setState({ language: evt.target.value })\r\n  }\r\n\r\n  async onSubmit(evt) {\r\n      evt.preventDefault()\r\n      const formData = new FormData()\r\n\r\n      // combine file input and input field\r\n      formData.append('document', this.state.document)\r\n      formData.append('language', this.state.language)\r\n\r\n      await this.fetch('post', \"/documents\", formData)\r\n\r\n      this.setState({\r\n        document: null,\r\n        inputFileKey: Date.now()    // reset the input key so that the input field is regenerated (reset)\r\n      })\r\n\r\n      if(this.state.error === null) {\r\n        this.setState({\r\n          success: \"Document uploaded successfully\"\r\n        })\r\n      }\r\n  }  \r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    \r\n    return (\r\n      <Fragment>\r\n        <Typography variant=\"h4\">Document upload</Typography>\r\n        <form encType=\"multipart/form-data\" onSubmit={ this.onSubmit }>\r\n          <label htmlFor=\"btn-upload\">\r\n            <input\r\n              id=\"btn-upload\"\r\n              key={this.state.inputFileKey}\r\n              name=\"btn-upload\"\r\n              style={{ display: 'none' }}\r\n              accept=\".txt\"\r\n              type=\"file\"\r\n              onChange={ this.onFileChange } \r\n            />\r\n\r\n            <Button\r\n              className=\"btn-choose\"\r\n              variant=\"outlined\"\r\n              component=\"span\" \r\n            >\r\n              Choose Files\r\n            </Button>\r\n        </label>\r\n\r\n        <InputLabel id=\"labelInputLanguage\">Language</InputLabel>\r\n        <Select\r\n          labelId=\"labelInputLanguage\"\r\n          id=\"inputLanguage\"\r\n          value={this.state.language}\r\n          onChange={this.handleLanguageChange}\r\n          required\r\n        >\r\n          {\r\n            languages.map((language, i) => (\r\n              <MenuItem key={i} value={language}><em>{language}</em></MenuItem>\r\n            ))\r\n          }\r\n        </Select>\r\n\r\n        <div className=\"file-name\">\r\n          {this.state.document && this.state.document.name.length > 0 && (\r\n            <Typography>{ this.state.document.name }</Typography>\r\n          )}\r\n        </div>\r\n          \r\n          <Button size=\"small\" \r\n            color=\"primary\" \r\n            disabled={ !this.state.document } \r\n            type=\"submit\"\r\n          >\r\n            <AddIcon/>Upload\r\n          </Button>\r\n        </form>\r\n\r\n        {this.state.error && (\r\n        <ErrorSnackbar\r\n          onClose={() => this.setState({ error: null })}\r\n          message={ this.state.error.message }\r\n        />\r\n        )}\r\n\r\n        {this.state.loading && (\r\n          <LoadingBar/>\r\n        )}\r\n\r\n        {this.state.success && (\r\n          <InfoSnackbar\r\n            onClose={() => this.setState({ success: null })}\r\n            message={ this.state.success }\r\n          />\r\n        )}\r\n      </Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default compose(\r\n    withRouter,\r\n    withStyles(styles),\r\n  )(FileUploadComponent);","C:\\Daten\\git\\annotator\\src\\components\\infoSnackbar.js",[],"C:\\Daten\\git\\annotator\\src\\pages\\documentAnnotator.js",[],"C:\\Daten\\git\\annotator\\src\\components\\help.js",[],{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","severity":1,"message":"62","line":19,"column":8,"nodeType":"63","messageId":"64","endLine":19,"endColumn":19},{"ruleId":"61","severity":1,"message":"65","line":121,"column":13,"nodeType":"63","messageId":"64","endLine":121,"endColumn":20},"no-native-reassign",["66"],"no-negated-in-lhs",["67"],"no-unused-vars","'SaveAltIcon' is defined but never used.","Identifier","unusedVar","'classes' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]